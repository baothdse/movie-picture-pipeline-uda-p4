name: Backend Continuous Deployment
run-name: ${{ github.actor }} is running Backend CD Pipeline

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  push:
    branches:
      - 'features/**'
  # Automatic trigger on pull request events targeting the main branch
  # pull_request_target:
  #   types:
  #     - opened
  #     - synchronize
  #   branches:
  #     - 'main'
  #   paths:
  #     # Trigger only if files in 'backend' directory change
  #     - 'starter/backend/**'
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read

env:
  AWS_DEFAULT_REGION: us-east-1
  ECR_REPOSITORY: backend
  ECR_IMAGE_TAG: ${{ github.sha }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      # Check out source code
      - name: Check out repository code
        uses: actions/checkout@v4
      
      # Setup Python
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pipenv'

      - name: Install pipenv
        run: pip install pipenv

      # Install dependencies
      - run: cd starter/backend && pipenv install --dev

      # run linter
      - run: cd starter/backend && pipenv run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      # Check out source code
      - name: Check out repository code
        uses: actions/checkout@v4
      
      # Setup Python
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pipenv'

      - name: Install pipenv
        run: pip install pipenv

      # Install dependencies
      - run: cd starter/backend && pipenv install

      # Run the tests
      - run: cd starter/backend && pipenv run test

  build:
    runs-on: ubuntu-latest
    needs: [ lint, test ]
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      
      - name: Check out repository code
        uses: actions/checkout@v4

      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo $REGISTRY/$ECR_REPOSITORY:$ECR_IMAGE_TAG
          cd starter/backend
          docker build -t $REGISTRY/$ECR_REPOSITORY:$ECR_IMAGE_TAG .
          docker push $REGISTRY/$ECR_REPOSITORY:$ECR_IMAGE_TAG

      - run: echo "üçè This job's status is ${{ job.status }}."

  deploy:
    runs-on: ubuntu-latest
    needs: [ build ]
    env:
      CLUSTER_NAME: cluster

    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      
      - name: Check out repository code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Confirm caller identity
        run: aws sts get-caller-identity

      # Update the cluster kubeconfig
      - name: Update Cluster Kubeconfig
        run: aws eks --region us-east-1 update-kubeconfig --name ${{ env.CLUSTER_NAME }}

      - run: cat ~/.kube/config

      - run: kubectl describe configmap -n kube-system aws-auth

      - name: Print kubectl & kustomize versions
        run: |-
          kubectl version
          kustomize version

      # Set the image tag to the newer version
      - name: Set image url and deploy
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd starter/backend/k8s
          kustomize edit set image backend=$REGISTRY/$ECR_REPOSITORY:$ECR_IMAGE_TAG
          kustomize build | kubectl apply -f -
      
      - name: Get pod
        run: kubectl get pod

      - name: Get Service
        run: kubectl get svc
      
