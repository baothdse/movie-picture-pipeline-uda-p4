name: Frontend Continuous Integration
run-name: ${{ github.actor }} is running Frontend CI Pipeline

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Automatic trigger on pull request events targeting the main branch
  pull_request_target:
    types:
      - opened
      - synchronize
    branches:
      - 'main'
    paths:
      # Trigger only if files in 'frontend' directory change
      - 'starter/frontend/**'
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # List for debugging purpose
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        id: list-state
        name: List the state of node modules
        continue-on-error: true
        run: npm list
      
      - name: Install dependencies
        id: install-dependencies
        run: cd starter/frontend && npm install --save
      
      - name: Run linter
        run: cd starter/frontend && npm run lint

      - run: echo "🍏 This job's status is ${{ job.status }}."

  test:
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # List for debugging purpose
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        id: list-state
        name: List the state of node modules
        continue-on-error: true
        run: npm list
      
      - name: Install dependencies
        id: install-dependencies
        run: cd starter/frontend && npm install --save

      - name: Run test
        id: test
        run: cd starter/frontend && npm run test

      - run: echo "🍏 This job's status is ${{ job.status }}."

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      
      - name: Check out repository code
        uses: actions/checkout@v4

      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      
      - name: Install dependencies
        id: install-dependencies
        run: cd starter/frontend && npm install --save

      - name: Run build
        id: build
        run: cd starter/frontend && docker build --tag=mp-frontend:latest .

      - run: echo "🍏 This job's status is ${{ job.status }}."