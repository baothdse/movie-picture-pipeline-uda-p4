name: Frontend Continuous Deployment
run-name: ${{ github.actor }} is running Frontend CD Pipeline

on:
  workflow_run:
    workflows: ["Backend Continuous Deployment"]
    types:
      - completed
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  push:
    branches:
      - 'features/**'
  # Automatic trigger on pull request events targeting the main branch
  # pull_request_target:
  #   types:
  #     - opened
  #     - synchronize
  #   branches:
  #     - 'main'
  #   paths:
  #     # Trigger only if files in 'backend' directory change
  #     - 'starter/backend/**'
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read

env:
  AWS_DEFAULT_REGION: us-east-1
  ECR_REPOSITORY: frontend
  ECR_IMAGE_TAG: ${{ github.sha }}
  CLUSTER_NAME: cluster

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      
      # Check out source code
      - name: Check out repository code
        uses: actions/checkout@v4
      
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # List for debugging purpose
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        id: list-state
        name: List the state of node modules
        continue-on-error: true
        run: npm list
      
      - name: Install dependencies
        id: install-dependencies
        run: cd starter/frontend && npm install --save

      - name: Run test
        id: test
        run: cd starter/frontend && npm run test

      - run: echo "üçè This job's status is ${{ job.status }}."

  build:
    runs-on: ubuntu-latest
    needs: [ test ]
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      
      - name: Check out repository code
        uses: actions/checkout@v4

      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

        # Update the cluster kubeconfig
      - name: Update Cluster Kubeconfig
        run: aws eks --region us-east-1 update-kubeconfig --name ${{ env.CLUSTER_NAME }}

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          # BACKEND_URL: ${{ steps.get-backend-url.outputs.BACKEND_URL }}
        run: |
          BACKEND_URL=$(kubectl get svc backend -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          cd starter/frontend
          echo "Backend URL: $BACKEND_URL"
          docker build -t $REGISTRY/$ECR_REPOSITORY:$ECR_IMAGE_TAG . --build-arg REACT_APP_MOVIE_API_URL=http://a8730013e97ab4e32bd720844127fa54-664901318.us-east-1.elb.amazonaws.com
          docker push $REGISTRY/$ECR_REPOSITORY:$ECR_IMAGE_TAG

      - run: echo "üçè This job's status is ${{ job.status }}"

  deploy:
    runs-on: ubuntu-latest
    needs: [ build ]

    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      
      - name: Check out repository code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Confirm caller identity
        run: aws sts get-caller-identity

      # Update the cluster kubeconfig
      - name: Update Cluster Kubeconfig
        run: aws eks --region us-east-1 update-kubeconfig --name ${{ env.CLUSTER_NAME }}

      # Set the image tag to the newer version
      - name: Set image url and deploy
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd starter/frontend/k8s
          kustomize edit set image frontend=$REGISTRY/$ECR_REPOSITORY:$ECR_IMAGE_TAG
          kustomize build | kubectl apply -f -

      - name: Get pod
        run: kubectl get pod

      - name: Get Service
        run: kubectl get svc
